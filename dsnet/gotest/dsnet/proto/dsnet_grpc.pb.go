// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.32.1
// source: dsnet.proto

package dsnet

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NetworkController_ControlStream_FullMethodName = "/dsnet.NetworkController/ControlStream"
)

// NetworkControllerClient is the client API for NetworkController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkControllerClient interface {
	ControlStream(ctx context.Context, opts ...grpc.CallOption) (NetworkController_ControlStreamClient, error)
}

type networkControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkControllerClient(cc grpc.ClientConnInterface) NetworkControllerClient {
	return &networkControllerClient{cc}
}

func (c *networkControllerClient) ControlStream(ctx context.Context, opts ...grpc.CallOption) (NetworkController_ControlStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &NetworkController_ServiceDesc.Streams[0], NetworkController_ControlStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &networkControllerControlStreamClient{stream}
	return x, nil
}

type NetworkController_ControlStreamClient interface {
	Send(*ShimToCtrl) error
	Recv() (*CtrlToShim, error)
	grpc.ClientStream
}

type networkControllerControlStreamClient struct {
	grpc.ClientStream
}

func (x *networkControllerControlStreamClient) Send(m *ShimToCtrl) error {
	return x.ClientStream.SendMsg(m)
}

func (x *networkControllerControlStreamClient) Recv() (*CtrlToShim, error) {
	m := new(CtrlToShim)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NetworkControllerServer is the server API for NetworkController service.
// All implementations must embed UnimplementedNetworkControllerServer
// for forward compatibility
type NetworkControllerServer interface {
	ControlStream(NetworkController_ControlStreamServer) error
	mustEmbedUnimplementedNetworkControllerServer()
}

// UnimplementedNetworkControllerServer must be embedded to have forward compatible implementations.
type UnimplementedNetworkControllerServer struct {
}

func (UnimplementedNetworkControllerServer) ControlStream(NetworkController_ControlStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ControlStream not implemented")
}
func (UnimplementedNetworkControllerServer) mustEmbedUnimplementedNetworkControllerServer() {}

// UnsafeNetworkControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkControllerServer will
// result in compilation errors.
type UnsafeNetworkControllerServer interface {
	mustEmbedUnimplementedNetworkControllerServer()
}

func RegisterNetworkControllerServer(s grpc.ServiceRegistrar, srv NetworkControllerServer) {
	s.RegisterService(&NetworkController_ServiceDesc, srv)
}

func _NetworkController_ControlStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NetworkControllerServer).ControlStream(&networkControllerControlStreamServer{stream})
}

type NetworkController_ControlStreamServer interface {
	Send(*CtrlToShim) error
	Recv() (*ShimToCtrl, error)
	grpc.ServerStream
}

type networkControllerControlStreamServer struct {
	grpc.ServerStream
}

func (x *networkControllerControlStreamServer) Send(m *CtrlToShim) error {
	return x.ServerStream.SendMsg(m)
}

func (x *networkControllerControlStreamServer) Recv() (*ShimToCtrl, error) {
	m := new(ShimToCtrl)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NetworkController_ServiceDesc is the grpc.ServiceDesc for NetworkController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetworkController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dsnet.NetworkController",
	HandlerType: (*NetworkControllerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ControlStream",
			Handler:       _NetworkController_ControlStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "dsnet.proto",
}
