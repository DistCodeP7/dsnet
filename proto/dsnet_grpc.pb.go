// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: dsnet.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NetworkController_ControlStream_FullMethodName = "/dsnet.NetworkController/ControlStream"
)

// NetworkControllerClient is the client API for NetworkController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkControllerClient interface {
	ControlStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ClientToController, ControllerToClient], error)
}

type networkControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkControllerClient(cc grpc.ClientConnInterface) NetworkControllerClient {
	return &networkControllerClient{cc}
}

func (c *networkControllerClient) ControlStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ClientToController, ControllerToClient], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NetworkController_ServiceDesc.Streams[0], NetworkController_ControlStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ClientToController, ControllerToClient]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NetworkController_ControlStreamClient = grpc.BidiStreamingClient[ClientToController, ControllerToClient]

// NetworkControllerServer is the server API for NetworkController service.
// All implementations must embed UnimplementedNetworkControllerServer
// for forward compatibility.
type NetworkControllerServer interface {
	ControlStream(grpc.BidiStreamingServer[ClientToController, ControllerToClient]) error
	mustEmbedUnimplementedNetworkControllerServer()
}

// UnimplementedNetworkControllerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNetworkControllerServer struct{}

func (UnimplementedNetworkControllerServer) ControlStream(grpc.BidiStreamingServer[ClientToController, ControllerToClient]) error {
	return status.Errorf(codes.Unimplemented, "method ControlStream not implemented")
}
func (UnimplementedNetworkControllerServer) mustEmbedUnimplementedNetworkControllerServer() {}
func (UnimplementedNetworkControllerServer) testEmbeddedByValue()                           {}

// UnsafeNetworkControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkControllerServer will
// result in compilation errors.
type UnsafeNetworkControllerServer interface {
	mustEmbedUnimplementedNetworkControllerServer()
}

func RegisterNetworkControllerServer(s grpc.ServiceRegistrar, srv NetworkControllerServer) {
	// If the following call pancis, it indicates UnimplementedNetworkControllerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NetworkController_ServiceDesc, srv)
}

func _NetworkController_ControlStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NetworkControllerServer).ControlStream(&grpc.GenericServerStream[ClientToController, ControllerToClient]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NetworkController_ControlStreamServer = grpc.BidiStreamingServer[ClientToController, ControllerToClient]

// NetworkController_ServiceDesc is the grpc.ServiceDesc for NetworkController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetworkController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dsnet.NetworkController",
	HandlerType: (*NetworkControllerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ControlStream",
			Handler:       _NetworkController_ControlStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "dsnet.proto",
}
