// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: dsnet.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MessageType int32

const (
	MessageType_DIRECT     MessageType = 0
	MessageType_BROADCAST  MessageType = 1
	MessageType_GROUP      MessageType = 2
	MessageType_REGISTERED MessageType = 3
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0: "DIRECT",
		1: "BROADCAST",
		2: "GROUP",
		3: "REGISTERED",
	}
	MessageType_value = map[string]int32{
		"DIRECT":     0,
		"BROADCAST":  1,
		"GROUP":      2,
		"REGISTERED": 3,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_dsnet_proto_enumTypes[0].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_dsnet_proto_enumTypes[0]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_dsnet_proto_rawDescGZIP(), []int{0}
}

type VectorClock struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Clock         map[string]uint64      `protobuf:"bytes,1,rep,name=clock,proto3" json:"clock,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VectorClock) Reset() {
	*x = VectorClock{}
	mi := &file_dsnet_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VectorClock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorClock) ProtoMessage() {}

func (x *VectorClock) ProtoReflect() protoreflect.Message {
	mi := &file_dsnet_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorClock.ProtoReflect.Descriptor instead.
func (*VectorClock) Descriptor() ([]byte, []int) {
	return file_dsnet_proto_rawDescGZIP(), []int{0}
}

func (x *VectorClock) GetClock() map[string]uint64 {
	if x != nil {
		return x.Clock
	}
	return nil
}

type Envelope struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	From          string                 `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To            string                 `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Payload       string                 `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	Type          MessageType            `protobuf:"varint,4,opt,name=type,proto3,enum=dsnet.MessageType" json:"type,omitempty"`
	Group         string                 `protobuf:"bytes,5,opt,name=group,proto3" json:"group,omitempty"`
	Seq           uint64                 `protobuf:"varint,6,opt,name=seq,proto3" json:"seq,omitempty"`
	Vclock        *VectorClock           `protobuf:"bytes,7,opt,name=vclock,proto3" json:"vclock,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Envelope) Reset() {
	*x = Envelope{}
	mi := &file_dsnet_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Envelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Envelope) ProtoMessage() {}

func (x *Envelope) ProtoReflect() protoreflect.Message {
	mi := &file_dsnet_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Envelope.ProtoReflect.Descriptor instead.
func (*Envelope) Descriptor() ([]byte, []int) {
	return file_dsnet_proto_rawDescGZIP(), []int{1}
}

func (x *Envelope) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Envelope) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *Envelope) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *Envelope) GetType() MessageType {
	if x != nil {
		return x.Type
	}
	return MessageType_DIRECT
}

func (x *Envelope) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *Envelope) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *Envelope) GetVclock() *VectorClock {
	if x != nil {
		return x.Vclock
	}
	return nil
}

type RegisterReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeId        string                 `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterReq) Reset() {
	*x = RegisterReq{}
	mi := &file_dsnet_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterReq) ProtoMessage() {}

func (x *RegisterReq) ProtoReflect() protoreflect.Message {
	mi := &file_dsnet_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterReq.ProtoReflect.Descriptor instead.
func (*RegisterReq) Descriptor() ([]byte, []int) {
	return file_dsnet_proto_rawDescGZIP(), []int{2}
}

func (x *RegisterReq) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type SubscribeReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeId        string                 `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Group         string                 `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeReq) Reset() {
	*x = SubscribeReq{}
	mi := &file_dsnet_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeReq) ProtoMessage() {}

func (x *SubscribeReq) ProtoReflect() protoreflect.Message {
	mi := &file_dsnet_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeReq.ProtoReflect.Descriptor instead.
func (*SubscribeReq) Descriptor() ([]byte, []int) {
	return file_dsnet_proto_rawDescGZIP(), []int{3}
}

func (x *SubscribeReq) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *SubscribeReq) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

type UnsubscribeReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeId        string                 `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Group         string                 `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnsubscribeReq) Reset() {
	*x = UnsubscribeReq{}
	mi := &file_dsnet_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnsubscribeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsubscribeReq) ProtoMessage() {}

func (x *UnsubscribeReq) ProtoReflect() protoreflect.Message {
	mi := &file_dsnet_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsubscribeReq.ProtoReflect.Descriptor instead.
func (*UnsubscribeReq) Descriptor() ([]byte, []int) {
	return file_dsnet_proto_rawDescGZIP(), []int{4}
}

func (x *UnsubscribeReq) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *UnsubscribeReq) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

type ClientToController struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Payload:
	//
	//	*ClientToController_Register
	//	*ClientToController_Outbound
	//	*ClientToController_Subscribe
	//	*ClientToController_Unsubscribe
	Payload       isClientToController_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientToController) Reset() {
	*x = ClientToController{}
	mi := &file_dsnet_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientToController) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientToController) ProtoMessage() {}

func (x *ClientToController) ProtoReflect() protoreflect.Message {
	mi := &file_dsnet_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientToController.ProtoReflect.Descriptor instead.
func (*ClientToController) Descriptor() ([]byte, []int) {
	return file_dsnet_proto_rawDescGZIP(), []int{5}
}

func (x *ClientToController) GetPayload() isClientToController_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *ClientToController) GetRegister() *RegisterReq {
	if x != nil {
		if x, ok := x.Payload.(*ClientToController_Register); ok {
			return x.Register
		}
	}
	return nil
}

func (x *ClientToController) GetOutbound() *Envelope {
	if x != nil {
		if x, ok := x.Payload.(*ClientToController_Outbound); ok {
			return x.Outbound
		}
	}
	return nil
}

func (x *ClientToController) GetSubscribe() *SubscribeReq {
	if x != nil {
		if x, ok := x.Payload.(*ClientToController_Subscribe); ok {
			return x.Subscribe
		}
	}
	return nil
}

func (x *ClientToController) GetUnsubscribe() *UnsubscribeReq {
	if x != nil {
		if x, ok := x.Payload.(*ClientToController_Unsubscribe); ok {
			return x.Unsubscribe
		}
	}
	return nil
}

type isClientToController_Payload interface {
	isClientToController_Payload()
}

type ClientToController_Register struct {
	Register *RegisterReq `protobuf:"bytes,1,opt,name=register,proto3,oneof"`
}

type ClientToController_Outbound struct {
	Outbound *Envelope `protobuf:"bytes,2,opt,name=outbound,proto3,oneof"`
}

type ClientToController_Subscribe struct {
	Subscribe *SubscribeReq `protobuf:"bytes,3,opt,name=subscribe,proto3,oneof"`
}

type ClientToController_Unsubscribe struct {
	Unsubscribe *UnsubscribeReq `protobuf:"bytes,4,opt,name=unsubscribe,proto3,oneof"`
}

func (*ClientToController_Register) isClientToController_Payload() {}

func (*ClientToController_Outbound) isClientToController_Payload() {}

func (*ClientToController_Subscribe) isClientToController_Payload() {}

func (*ClientToController_Unsubscribe) isClientToController_Payload() {}

type ControllerToClient struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Inbound       *Envelope              `protobuf:"bytes,1,opt,name=inbound,proto3" json:"inbound,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ControllerToClient) Reset() {
	*x = ControllerToClient{}
	mi := &file_dsnet_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ControllerToClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControllerToClient) ProtoMessage() {}

func (x *ControllerToClient) ProtoReflect() protoreflect.Message {
	mi := &file_dsnet_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControllerToClient.ProtoReflect.Descriptor instead.
func (*ControllerToClient) Descriptor() ([]byte, []int) {
	return file_dsnet_proto_rawDescGZIP(), []int{6}
}

func (x *ControllerToClient) GetInbound() *Envelope {
	if x != nil {
		return x.Inbound
	}
	return nil
}

var File_dsnet_proto protoreflect.FileDescriptor

const file_dsnet_proto_rawDesc = "" +
	"\n" +
	"\vdsnet.proto\x12\x05dsnet\"|\n" +
	"\vVectorClock\x123\n" +
	"\x05clock\x18\x01 \x03(\v2\x1d.dsnet.VectorClock.ClockEntryR\x05clock\x1a8\n" +
	"\n" +
	"ClockEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value:\x028\x01\"\xc4\x01\n" +
	"\bEnvelope\x12\x12\n" +
	"\x04from\x18\x01 \x01(\tR\x04from\x12\x0e\n" +
	"\x02to\x18\x02 \x01(\tR\x02to\x12\x18\n" +
	"\apayload\x18\x03 \x01(\tR\apayload\x12&\n" +
	"\x04type\x18\x04 \x01(\x0e2\x12.dsnet.MessageTypeR\x04type\x12\x14\n" +
	"\x05group\x18\x05 \x01(\tR\x05group\x12\x10\n" +
	"\x03seq\x18\x06 \x01(\x04R\x03seq\x12*\n" +
	"\x06vclock\x18\a \x01(\v2\x12.dsnet.VectorClockR\x06vclock\"&\n" +
	"\vRegisterReq\x12\x17\n" +
	"\anode_id\x18\x01 \x01(\tR\x06nodeId\"=\n" +
	"\fSubscribeReq\x12\x17\n" +
	"\anode_id\x18\x01 \x01(\tR\x06nodeId\x12\x14\n" +
	"\x05group\x18\x02 \x01(\tR\x05group\"?\n" +
	"\x0eUnsubscribeReq\x12\x17\n" +
	"\anode_id\x18\x01 \x01(\tR\x06nodeId\x12\x14\n" +
	"\x05group\x18\x02 \x01(\tR\x05group\"\xf0\x01\n" +
	"\x12ClientToController\x120\n" +
	"\bregister\x18\x01 \x01(\v2\x12.dsnet.RegisterReqH\x00R\bregister\x12-\n" +
	"\boutbound\x18\x02 \x01(\v2\x0f.dsnet.EnvelopeH\x00R\boutbound\x123\n" +
	"\tsubscribe\x18\x03 \x01(\v2\x13.dsnet.SubscribeReqH\x00R\tsubscribe\x129\n" +
	"\vunsubscribe\x18\x04 \x01(\v2\x15.dsnet.UnsubscribeReqH\x00R\vunsubscribeB\t\n" +
	"\apayload\"?\n" +
	"\x12ControllerToClient\x12)\n" +
	"\ainbound\x18\x01 \x01(\v2\x0f.dsnet.EnvelopeR\ainbound*C\n" +
	"\vMessageType\x12\n" +
	"\n" +
	"\x06DIRECT\x10\x00\x12\r\n" +
	"\tBROADCAST\x10\x01\x12\t\n" +
	"\x05GROUP\x10\x02\x12\x0e\n" +
	"\n" +
	"REGISTERED\x10\x032^\n" +
	"\x11NetworkController\x12I\n" +
	"\rControlStream\x12\x19.dsnet.ClientToController\x1a\x19.dsnet.ControllerToClient(\x010\x01B\x13Z\x11dsnet/proto;protob\x06proto3"

var (
	file_dsnet_proto_rawDescOnce sync.Once
	file_dsnet_proto_rawDescData []byte
)

func file_dsnet_proto_rawDescGZIP() []byte {
	file_dsnet_proto_rawDescOnce.Do(func() {
		file_dsnet_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_dsnet_proto_rawDesc), len(file_dsnet_proto_rawDesc)))
	})
	return file_dsnet_proto_rawDescData
}

var file_dsnet_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_dsnet_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_dsnet_proto_goTypes = []any{
	(MessageType)(0),           // 0: dsnet.MessageType
	(*VectorClock)(nil),        // 1: dsnet.VectorClock
	(*Envelope)(nil),           // 2: dsnet.Envelope
	(*RegisterReq)(nil),        // 3: dsnet.RegisterReq
	(*SubscribeReq)(nil),       // 4: dsnet.SubscribeReq
	(*UnsubscribeReq)(nil),     // 5: dsnet.UnsubscribeReq
	(*ClientToController)(nil), // 6: dsnet.ClientToController
	(*ControllerToClient)(nil), // 7: dsnet.ControllerToClient
	nil,                        // 8: dsnet.VectorClock.ClockEntry
}
var file_dsnet_proto_depIdxs = []int32{
	8, // 0: dsnet.VectorClock.clock:type_name -> dsnet.VectorClock.ClockEntry
	0, // 1: dsnet.Envelope.type:type_name -> dsnet.MessageType
	1, // 2: dsnet.Envelope.vclock:type_name -> dsnet.VectorClock
	3, // 3: dsnet.ClientToController.register:type_name -> dsnet.RegisterReq
	2, // 4: dsnet.ClientToController.outbound:type_name -> dsnet.Envelope
	4, // 5: dsnet.ClientToController.subscribe:type_name -> dsnet.SubscribeReq
	5, // 6: dsnet.ClientToController.unsubscribe:type_name -> dsnet.UnsubscribeReq
	2, // 7: dsnet.ControllerToClient.inbound:type_name -> dsnet.Envelope
	6, // 8: dsnet.NetworkController.ControlStream:input_type -> dsnet.ClientToController
	7, // 9: dsnet.NetworkController.ControlStream:output_type -> dsnet.ControllerToClient
	9, // [9:10] is the sub-list for method output_type
	8, // [8:9] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_dsnet_proto_init() }
func file_dsnet_proto_init() {
	if File_dsnet_proto != nil {
		return
	}
	file_dsnet_proto_msgTypes[5].OneofWrappers = []any{
		(*ClientToController_Register)(nil),
		(*ClientToController_Outbound)(nil),
		(*ClientToController_Subscribe)(nil),
		(*ClientToController_Unsubscribe)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_dsnet_proto_rawDesc), len(file_dsnet_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dsnet_proto_goTypes,
		DependencyIndexes: file_dsnet_proto_depIdxs,
		EnumInfos:         file_dsnet_proto_enumTypes,
		MessageInfos:      file_dsnet_proto_msgTypes,
	}.Build()
	File_dsnet_proto = out.File
	file_dsnet_proto_goTypes = nil
	file_dsnet_proto_depIdxs = nil
}
